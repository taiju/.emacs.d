#+TITLE: Emacs の設定

Emacs の設定。

Org モードで書かれたこの文書は、 ~init.el~ から ~(org-babel-load-file (expand-file-name "~/.emacs.d/config.org"))~ で読み込まれることで設定ファイルになる。

* パッケージ設定

何はなくともパッケージ。

melpa, org のパッケージアーカイブ URL を指定する。

#+BEGIN_SRC emacs-lisp
  (setq package-archives
	'(("gnu" . "https://elpa.gnu.org/packages/")
	  ("melpa" . "https://melpa.org/packages/")
	  ("org" . "https://orgmode.org/elpa/")))
#+END_SRC

パッケージを初期化する。

#+BEGIN_SRC emacs-lisp
  (package-initialize)
#+END_SRC

パッケージが未インストールの場合は起動時にインストールされるようにしたいので、そんな感じのカスタム関数を定義しておく。

#+BEGIN_SRC emacs-lisp
  (defun taiju/package-install (pkg)
    (unless (package-installed-p pkg)
      (unless package-archive-contents
	(package-refresh-contents))
      (package-install pkg)))
#+END_SRC

* 起動時の設定

スタートアップ画面は出さない。

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC

起動直後からフルスクリーン化する。

#+BEGIN_SRC emacs-lisp
  (toggle-frame-fullscreen)
#+END_SRC

* 見た目の設定

ツールバーも、メニューバーも、スクロールバーもいらない。

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC

フルスクリーンだと時間とかバッテリー残量とかが見えなくて困るので、モードラインに表示する。

#+BEGIN_SRC emacs-lisp
  (setq display-time-format "%m-%d %H:%M")
  (display-time)
  (display-battery-mode t)
#+END_SRC

** テーマ

とりあえず、標準で入っている leuven を使う。

 #+BEGIN_SRC emacs-lisp
   (load-theme 'leuven t)
 #+END_SRC

* 挙動の調整

スクロール時に画面が動きすぎる問題を解消する。

#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC

質問の重要度に関わらずは y or n で答えたい。

#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

つい癖で全角半角キーで日本語入力を切り替えてしまうので、全角半角キーにも ~toggle-input-method~ を割り当てておく。

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<zenkaku-hankaku>") 'toggle-input-method)
#+END_SRC

バッファ一覧はフィルタとか使いたい時があるので ibuffer を使うようにする。

#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_src

Org モードで挿入される日付の書式等を環境で統一したいので、 ~system-time-locale~ を設定する。

#+begin_src emacs-lisp
  (setq system-time-locale "C")
#+end_src

日本語ファイル名を検索したりするので、 ~find-ls-option~ を調整して、ついでに表示結果も調整する。

#+begin_src emacs-lisp
  (setq find-ls-option '("-exec ls -ldh {} +" . "-ldh"))
#+end_src

* 日本語

** 言語環境

言語環境を日本語にする。

#+BEGIN_SRC emacs-lisp
  (set-language-environment "Japanese")
#+END_SRC

** 文字コード

文字コードは UTF-8 を優先。

#+BEGIN_SRC emacs-lisp
  (prefer-coding-system 'utf-8)
#+END_SRC

** 日本語入力

日本語入力は mozc 一択。[fn:mozc]

#+BEGIN_SRC emacs-lisp
  (taiju/package-install 'mozc)
  (setq default-input-method "japanese-mozc")
#+END_SRC

デフォルトのスタイルはちょっとうるさいので、スタイルを変更する。

#+BEGIN_SRC emacs-lisp
  (setq mozc-candidate-style 'echo-area)
#+END_SRC

* フォント

フォントは Ricty を使う。

#+BEGIN_SRC emacs-lisp
  (let ((f "Ricty"))
    (set-face-attribute 'default nil :family f :height 120)
    (set-face-attribute 'fixed-pitch nil :family f)
    (set-face-attribute 'variable-pitch nil :family f)
    (set-fontset-font nil 'japanese-jisx0208 (font-spec :family f)))
#+END_SRC

* ファイル全般

自動保存しない。

#+BEGIN_SRC emacs-lisp
  (setq auto-save-default nil)
#+END_SRC

バックアップも作らない。

#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
#+END_SRC

POSIX のファイルの定義に則り、最終行に改行を入れる。

#+BEGIN_SRC emacs-lisp
  (setq require-final-newline t)
#+END_SRC

保存時に余計なホワイトスペースを削除するようにする。

#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook #'delete-trailing-whitespace)
#+END_SRC

基本はこれで良いんだけど、Git 管理下のファイル等で diff が出過ぎて辛いことになったりする場合は、 OFF にできるようにカスタムコマンドを定義しておく。

#+BEGIN_SRC emacs-lisp
  (defun taiju/toggle-delete-trailing-whitespace-on-save ()
    (interactive)
    (cond ((member 'delete-trailing-whitespace before-save-hook)
	   (remove-hook 'before-save-hook 'delete-trailing-whitespace)
	   (message "delete-trailing-whitespace: OFF"))
	  (t
	   (add-hook 'before-save-hook 'delete-trailing-whitespace)
	   (message "delete-trailing-whitespace: ON"))))
#+END_SRC

* プログラミング

ここにはプログラミングに関する設定を書いていく。

** プロジェクト管理

プロジェクト管理には projectile を使う。

#+begin_src emacs-lisp
  (taiju/package-install 'projectile)
  (projectile-mode +1)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
#+end_src

** 補完

コード等の補完は company-mode を使う。

#+BEGIN_SRC emacs-lisp
  (taiju/package-install 'company)
#+END_SRC

使えるタイミングでは常に使いたいので、 ~global-company-mode~ を有効する。

#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook 'global-company-mode)
#+END_SRC

補完候補はすぐ出て欲しいので delay しない。

#+BEGIN_SRC emacs-lisp
  (setq company-idle-delay 0)
#+END_SRC

** シンタックスチェック

シンタックスチェックは flycheck を使う。

#+begin_src emacs-lisp
  (taiju/package-install 'flycheck)
#+end_src

flycheck の ON/OFF は別のモードで。

** コードスニペット

コードスニペットは yasnippet を使う。

#+begin_src emacs-lisp
  (taiju/package-install 'yasnippet)
  (taiju/package-install 'yasnippet-snippets)
  (yas-global-mode 1)
#+end_src

** company と yasnippet の連携

#+begin_src emacs-lisp
  (global-set-key (kbd "C-c y") 'company-yasnippet)
#+end_src

** LSP

LSP ベースの各プログラミング開発環境を利用したいので、lsp-mode と company-lsp を入れる。

#+begin_src emacs-lisp
  (taiju/package-install 'lsp-mode)
  (taiju/package-install 'lsp-ui)
  (taiju/package-install 'company-lsp)
#+end_src

** Lisp

Emacs Lisp と Common Lisp の共通の設定。

Lisp を編集しやすいようにする。

Paredit をインストールする。

#+BEGIN_SRC emacs-lisp
  (taiju/package-install 'paredit)
#+END_SRC

Emacs Lisp と Common Lisp で show-paren-mode と paredit-mode と eldoc-mode を有効にする。

#+BEGIN_SRC emacs-lisp
  (defun lisps-mode-hooks ()
    (show-paren-mode t)
    (enable-paredit-mode)
    (eldoc-mode t))
  (mapc (lambda (hook) (add-hook hook #'lisps-mode-hooks))
	'(emacs-lisp-mode-hook
	  ielm-mode-hook
	  lisp-mode-hook
	  lisp-interaction-mode-hook
	  slime-repl-mode-hook
	  eval-expression-minibuffer-setup-hook))
#+END_SRC

*** Common Lisp

SLIME をインストールする。

#+begin_src emacs-lisp
  (taiju/package-install 'slime)
  (slime-setup '(slime-fancy slime-quicklisp slime-asdf slime-company slime-fuzzy))
#+end_src

処理系は SBCL を使う。

#+begin_src emacs-lisp
  (setq inferior-lisp-program "sbcl")
#+end_src

** Go

Go の開発環境を整える。

#+begin_src emacs-lisp
  (taiju/package-install 'go-mode)
  (defun go-mode-hooks ()
    (lsp)
    (flycheck-mode)
    (setq tab-width 4
	  c-basic-offset 4))
  (add-hook 'go-mode-hook #'go-mode-hooks)
#+end_src

Org モードでも使うので、ob-go も入れておく。

#+begin_src emacs-lisp
  (taiju/package-install 'ob-go)
#+end_src

* 各種パッケージ

ここからは各種パッケージの個別設定を書いていく。

** Ido

コマンド補完等は Ido を全面的に採用する。自分はデフォルト厨なので標準で入っているのが良い。

#+BEGIN_SRC emacs-lisp
  (ido-mode t)
#+END_SRC

記憶力がないので、Flexible Matching を有効にする。

#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching t)
#+END_SRC

補完候補が大文字か小文字かも区別したくない。

#+BEGIN_SRC emacs-lisp
  (setq ido-case-fold t)
#+END_SRC

なるべくいろんなところで使えるようにする。

#+BEGIN_SRC emacs-lisp
  (ido-everywhere t)
#+END_SRC

*** ido-completing-read+

ido-every-where でも補完対象が足りない。

#+BEGIN_SRC emacs-lisp
  (taiju/package-install 'ido-completing-read+)
  (ido-ubiquitous-mode t)
#+END_SRC

*** smex

~M-x~ でも Ido が使えるように ~smex~ を入れて、初期化しておく。

#+BEGIN_SRC emacs-lisp
  (taiju/package-install 'smex)
  (smex-initialize)
#+END_SRC

キーバインドは[[https://github.com/nonsequitur/smex/blob/master/README.markdown][公式ドキュメント]]そのままの設定にする。

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-x") 'smex)
  (global-set-key (kbd "M-X") 'smex-major-mode-commands)
  (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
#+END_SRC

*** ido-vertical

やはり補完候補は縦並びがしっくりくる。

#+BEGIN_SRC emacs-lisp
  (taiju/package-install 'ido-vertical-mode)
  (ido-vertical-mode 1)
#+END_SRC

補完候補の選択は使い慣れた ~C-n~, ~C-p~ にする。[fn:ido-vertical]

#+BEGIN_SRC emacs-lisp
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+END_SRC

*** flx-ido

flx-ido を入れて、常にあいまい検索できるようにする。

#+begin_src emacs-lisp
  (taiju/package-install 'flx-ido)
  (flx-ido-mode 1)
#+end_src

~flx-ido-use-faces~ が有効になるように標準のはオフる。

#+begin_src emacs-lisp
  (setq ido-use-faces nil)
#+end_src

** Magit

最高の Git クライアント。

#+BEGIN_SRC emacs-lisp
  (taiju/package-install 'magit)
#+END_SRC

Ido を有効にする。

#+BEGIN_SRC emacs-lisp
  (setq magit-completing-read-function 'magit-ido-completing-read)
#+END_SRC

** Org

言わずもがな便利に使っている。

*** 全般

最新版をインストールする。

#+begin_src emacs-lisp
  (taiju/package-install 'org-plus-contrib)
#+end_src

タスクを閉じる時に閉じた時間を記録するようにする。

#+begin_src emacs-lisp
  (setq org-log-done 'time)
#+end_src

*** org-capture/org-refile

キーバインドは標準的なやつ。

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "\C-cc") 'org-capture)
#+END_SRC

テンプレートは下記。

基本的にほとんど TODO リストだけど、内容に応じて収集先を適宜変えている。

#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
	`(("b" "Bucket List" entry (file+headline ,(expand-file-name "bucket.org" org-directory) "やりたいことリスト")
	   "* TODO %?")
	  ("w" "Wish List" entry (file+headline ,(expand-file-name "wish.org" org-directory) "ほしいものリスト")
	   "* TODO %?")
	  ("t" "TODO List" entry (file+headline ,(expand-file-name "todo.org" org-directory) "やることリスト")
	   "* TODO %?")
	  ("o" "Outsourcing List" entry (file+headline ,(expand-file-name "outsourcing.org" org-directory) "おねがいごとリスト")
	   "* TODO %?")
	  ("n" "Notes" entry (file+olp+datetree ,(expand-file-name "notes.org" org-directory))
	   "* %?")))
#+END_SRC

上記で追加したタスクは、各ファイルにリファイルできるようにする。

#+begin_src emacs-lisp
  (setq org-refile-targets
	'(("bucket.org" :level . 1)
	  ("wish.org" :level . 1)
	  ("todo.org" :level . 1)
	  ("outsourcing.org" :level . 1)))
#+end_src

*** org-agenda

キーバインドは標準的なやつ。

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "\C-ca") 'org-agenda)
#+END_SRC

~org-directory~ を ~org-agenda-files~ に設定する。

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files (list org-directory))
#+END_SRC

*** org-babel

いろいろ org-babel で実行できるようにしておく。

#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (dot . t)
     (sql . t)
     (shell . t)
     (perl . t)
     (go . t)))
#+END_SRC

** undo-tree

標準の undo / redo がうまく使いこなせないので、undo-tree を入れる。

#+BEGIN_SRC emacs-lisp
  (taiju/package-install 'undo-tree)
  (global-undo-tree-mode 1)
#+END_SRC

** Twitter

Twitter クライアントは Emacs で事足りる。

#+BEGIN_SRC emacs-lisp
  (taiju/package-install 'twittering-mode)
#+END_SRC

パスワードを保存する。

#+BEGIN_SRC emacs-lisp
  (setq twittering-use-master-password t)
#+END_SRC

** which-key

うる覚えのキーバインドは which-key があると助かる時がある。

#+BEGIN_SRC emacs-lisp
  (taiju/package-install 'which-key)
  (which-key-mode)
#+END_SRC

** dired

dired-subtree を入れて、dired をツリーで操作できるようにする。

#+BEGIN_SRC emacs-lisp
  (taiju/package-install 'dired-subtree)
#+END_SRC

ツリーの開閉を直感的なキーバインドで操作できるようにする。

#+BEGIN_SRC emacs-lisp
  (require 'dired)
  (define-key dired-mode-map (kbd "<right>") 'dired-subtree-insert)
  (define-key dired-mode-map (kbd "<left>") 'dired-subtree-remove)
  (define-key dired-mode-map (kbd "f") 'dired-subtree-insert)
  (define-key dired-mode-map (kbd "b") 'dired-subtree-remove)
#+END_SRC

デフォルトだとサブツリーのバックグラウンドカラーがどぎつくて見にくすぎるので、色が変わる必要性もないし OFF る。

#+BEGIN_SRC emacs-lisp
  (setq dired-subtree-use-backgrounds nil)
#+END_SRC

** emojify

org-mode とかで絵文字使いたい時があるので emojify を入れておく。

#+BEGIN_SRC emacs-lisp
  (taiju/package-install 'emojify)
#+END_SRC

org-mode で有効化しておく。

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook #'emojify-mode)
#+END_SRC

絵文字のテスト:ok_hand:

* Footnotes

[fn:mozc] この設定を上記の設定より前に書くと上手く効かなかった。

[fn:ido-vertical] ~ido-toggle-prefix~ が ~C-p~ にバインドされているけど、使わないので上書きして問題ない。
