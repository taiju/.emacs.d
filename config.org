#+TITLE: Emacs の設定

Emacs の設定。

Org モードで書かれたこの文書は、 ~init.el~ から ~(org-babel-load-file (expand-file-name "~/.emacs.d/config.org"))~ で読み込まれることで設定ファイルになる。

* コンパイルオプション

  下記のコンパイルオプション付きで Emacs をソースインストールする。メインで使用している Emacs のバージョンは 27.1。

  #+begin_example
    ./configure --with-modules --with-json --with-xwidgets --with-imagemagick --with-mailutils
  #+end_example

* パッケージ設定

  何はなくともパッケージ。

  melpa, org のパッケージアーカイブ URL を指定する。

  #+begin_src emacs-lisp
    (setq package-archives
          '(("gnu" . "https://elpa.gnu.org/packages/")
            ("melpa" . "https://melpa.org/packages/")
            ("org" . "https://orgmode.org/elpa/")))
  #+end_src

  パッケージを初期化する。

  #+begin_src emacs-lisp
    (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
    (package-initialize)
  #+end_src

  パッケージが未インストールの場合は起動時にインストールされるようにしたいので、そんな感じのカスタム関数を定義しておく。

  #+begin_src emacs-lisp
    (defun taiju/package-install (pkg)
      (unless (package-installed-p pkg)
        (unless package-archive-contents
          (package-refresh-contents))
        (package-install pkg)))
  #+end_src

* カスタムファイルの場所

  カスタムファイルは ~init.el~ とは別のパスに保存するようにする。

  #+begin_src emacs-lisp
    (setq custom-file (expand-file-name "~/.emacs.d/custom.el"))
  #+end_src

* 起動時の設定

  スタートアップ画面は出さない。

  #+begin_src emacs-lisp
    (setq inhibit-startup-message t)
  #+end_src

  起動直後からフルスクリーン化する。

  #+begin_src emacs-lisp
    (toggle-frame-fullscreen)
  #+end_src

* 見た目の設定

  ツールバーも、メニューバーも、スクロールバーもいらない。

  #+begin_src emacs-lisp
    (tool-bar-mode -1)
    (menu-bar-mode -1)
    (scroll-bar-mode -1)
  #+end_src

  フルスクリーンだと時間とかバッテリー残量とかが見えなくて困るので、モードラインに表示する。

  #+begin_src emacs-lisp
    (setq display-time-format "%m-%d %H:%M")
    (display-time)
    (display-battery-mode t)
  #+end_src

** テーマ

   標準で入っている leuven を使う。

   #+begin_src emacs-lisp
     (load-theme 'leuven t)
   #+end_src

* 挙動の調整

  スクロール時に画面が動きすぎる問題を解消する。

  #+begin_src emacs-lisp
    (setq scroll-conservatively 100)
  #+end_src

  質問の重要度に関わらずは y or n で答えたい。

  #+begin_src emacs-lisp
    (fset 'yes-or-no-p 'y-or-n-p)
  #+end_src

  つい癖で全角半角キーで日本語入力を切り替えてしまうので、全角半角キーにも ~toggle-input-method~ を割り当てておく。

  #+begin_src emacs-lisp
    (global-set-key (kbd "<zenkaku-hankaku>") #'toggle-input-method)
  #+end_src

  バッファ一覧はフィルタとか使いたい時があるので ibuffer を使うようにする。

  #+begin_src emacs-lisp
    (global-set-key (kbd "C-x C-b") #'ibuffer)
  #+end_src

  Org モードで挿入される日付の書式等を環境で統一したいので、 ~system-time-locale~ を設定する。

  #+begin_src emacs-lisp
    (setq system-time-locale "C")
  #+end_src

  日本語ファイル名を検索したりするので、 ~find-ls-option~ を調整して、ついでに表示結果も調整する。

  #+begin_src emacs-lisp
    (setq find-ls-option '("-exec ls -ldh {} +" . "-ldh"))
  #+end_src

  デフォルトのブラウザは eww にする。

  #+begin_src emacs-lisp
    (setq browse-url-browser-function #'eww-browse-url)
  #+end_src

  ヘルプを多用するが、Helpful パッケージ試用してみたら圧倒的に読みやすかったので、インストールして標準のキーバインドをすべて置き換える。

  #+begin_src emacs-lisp
    (taiju/package-install 'helpful)
    (global-set-key (kbd "C-h f") #'helpful-callable)
    (global-set-key (kbd "C-h v") #'helpful-variable)
    (global-set-key (kbd "C-h k") #'helpful-key)
    (global-set-key (kbd "C-c C-d") #'helpful-at-point)
    (global-set-key (kbd "C-h F") #'helpful-function)
    (global-set-key (kbd "C-h C") #'helpful-command)
  #+end_src

  対応するカッコを常に自動入力するようにする。

  #+begin_src emacs-lisp
    (electric-pair-mode t)
  #+end_src

  ベルの音は鳴らさないようにする。

  #+begin_src emacs-lisp
    (setq visible-bell t)
  #+end_src

  選択範囲は入力内容で置き換わるようにする。

  #+begin_src emacs-lisp
    (delete-selection-mode 1)
  #+end_src

  インデントはデフォルトでスペースにする。

  #+begin_src emacs-lisp
    (setq-default indent-tabs-mode nil)
  #+end_src

  ナローイングを許可する。

  #+begin_src emacs-lisp
    (put 'narrow-to-region 'disabled nil)
  #+end_src

  タブバーを表示する。

  #+begin_src emacs-lisp
    (tab-bar-mode +1)
    (tab-bar-history-mode +1)
  #+end_src

* 日本語

** 言語環境

   言語環境を日本語にする。

   #+begin_src emacs-lisp
     (set-language-environment "Japanese")
   #+end_src

** 文字コード

   文字コードは UTF-8 を優先。

   #+begin_src emacs-lisp
     (prefer-coding-system 'utf-8)
   #+end_src

** 日本語入力

   日本語入力は mozc 一択。[fn:mozc]

   #+begin_src emacs-lisp
     (taiju/package-install 'mozc)
     (setq default-input-method "japanese-mozc")
   #+end_src

   デフォルトのスタイルはちょっとうるさいので、スタイルを変更する。

   #+begin_src emacs-lisp
     (setq mozc-candidate-style 'echo-area)
   #+end_src

* フォント

  #+begin_src emacs-lisp
    (let ((f "HackGenNerd Console"))
      (set-face-attribute 'default nil :family f :height 120)
      (set-face-attribute 'fixed-pitch nil :family f)
      (set-face-attribute 'variable-pitch nil :family f)
      (set-fontset-font nil 'japanese-jisx0208 (font-spec :family f)))
  #+end_src

* ファイル全般

  自動保存を有効にする。
  Emacs 26 以降で使用できる auto-save-visited-mode は余計なファイルを作らない。

  #+begin_src emacs-lisp
    (auto-save-visited-mode +1)
  #+end_src

  バックアップは作らない。

  #+begin_src emacs-lisp
    (setq make-backup-files nil)
  #+end_src

  POSIX のファイルの定義に則り、最終行に改行を入れる。

  #+begin_src emacs-lisp
    (setq require-final-newline t)
  #+end_src

  保存時に余計なホワイトスペースを削除するようにする。

  #+begin_src emacs-lisp
    (add-hook 'before-save-hook #'delete-trailing-whitespace)
  #+end_src

  基本はこれで良いんだけど、Git 管理下のファイル等で diff が出過ぎて辛いことになったりする場合は、 OFF にできるようにカスタムコマンドを定義しておく。

  #+begin_src emacs-lisp
    (defun taiju/toggle-delete-trailing-whitespace-on-save ()
      (interactive)
      (cond ((member 'delete-trailing-whitespace before-save-hook)
             (remove-hook 'before-save-hook 'delete-trailing-whitespace)
             (message "delete-trailing-whitespace: OFF"))
            (t
             (add-hook 'before-save-hook 'delete-trailing-whitespace)
             (message "delete-trailing-whitespace: ON"))))
  #+end_src

* プログラミング

  ここにはプログラミングに関する設定を書いていく。

** プロジェクト管理

   プロジェクト管理には projectile を使う。

   #+begin_src emacs-lisp
     (taiju/package-install 'projectile)
     (projectile-mode +1)
     (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
   #+end_src

   プロジェクトにスイッチした時のアクションは ~projectile-vc~ にする。

   #+begin_src emacs-lisp
     (setq projectile-switch-project-action #'projectile-vc)
   #+end_src

** 補完

   コード等の補完は company-mode を使う。

   #+begin_src emacs-lisp
     (taiju/package-install 'company)
   #+end_src

   使えるタイミングでは常に使いたいので、 ~global-company-mode~ を有効する。

   #+begin_src emacs-lisp
     (add-hook 'after-init-hook 'global-company-mode)
   #+end_src

   補完候補はすぐ出て欲しいので delay しない。最小文字数も1文字にする。

   #+begin_src emacs-lisp
     (setq company-minimum-prefix-length 1
           company-idle-delay 0.0)
   #+end_src

   シェルを使う時は反応が悪くてストレスな時があるのでオフにする。

   #+begin_src emacs-lisp
     (defun taiju/deactivate-company ()
       (company-mode -1))

     (add-hook 'shell-mode-hook #'taiju/deactivate-company)
     (add-hook 'eshell-mode-hook #'taiju/deactivate-company)
     (add-hook 'term-mode-hook #'taiju/deactivate-company)
   #+end_src

** シンタックスチェック

   シンタックスチェックは flycheck を使う。

   #+begin_src emacs-lisp
     (taiju/package-install 'flycheck)
   #+end_src

   flycheck の ON/OFF は別のモードで。

** コードスニペット

   コードスニペットは yasnippet を使う。

   #+begin_src emacs-lisp
     (taiju/package-install 'yasnippet)
     (taiju/package-install 'yasnippet-snippets)
     (yas-global-mode 1)
   #+end_src

** company と yasnippet の連携

   #+begin_src emacs-lisp
     (global-set-key (kbd "C-c y") #'company-yasnippet)
   #+end_src

** editorconfig

   EditorConfig が効くようにしておく。

   #+begin_src emacs-lisp
     (taiju/package-install 'editorconfig)
     (editorconfig-mode t)
   #+end_src

** Treemacs

   Projectile や lsp-mode で Treemacs を使う。

   #+begin_src emacs-lisp
     (taiju/package-install 'treemacs)
     (taiju/package-install 'treemacs-projectile)
     (taiju/package-install 'treemacs-magit)
     (taiju/package-install 'treemacs-icons-dired)
   #+end_src

   treemacs のウィンドウに切り替えるためのキーバインドを設定しておく。

   #+begin_src emacs-lisp
     (global-set-key (kbd "M-0") #'treemacs-select-window)
   #+end_src

** dap-mode

   デバッガとして dap-mode を使う。

   #+begin_src emacs-lisp
     (taiju/package-install 'dap-mode)
   #+end_src

** LSP

   LSP ベースの各プログラミング開発環境を利用したいので、lsp-mode を入れる。

   #+begin_src emacs-lisp
     (setq lsp-keymap-prefix "C-l")
     (taiju/package-install 'lsp-mode)
     (taiju/package-install 'lsp-ui)
     (taiju/package-install 'lsp-treemacs)
   #+end_src

   lsp で which-key を使用する。

   #+begin_src emacs-lisp
     (add-hook 'lsp-mode-hook #'lsp-enable-which-key-integration)
   #+end_src

   ダーク系テーマに最適化されているっぽくて、一部デフォルト faces がライト系テーマでは明るくて見えないので調整する。

   #+begin_src emacs-lisp
     (require 'lsp-ui)
     (set-face-attribute 'lsp-ui-sideline-code-action nil :foreground "dim gray")
   #+end_src

   パフォーマンスに関係する項目の設定。（メインマシン用）

   参考: [[https://emacs-lsp.github.io/lsp-mode/page/performance/][Performance - LSP Mode - LSP support for Emacs]]

   #+begin_src emacs-lisp
     (cl-labels
         ((mb (n) (* 1024 1024 n)))
       (setq read-process-output-max (mb 1))
       (setq gc-cons-threshold (mb 100)))
   #+end_src

*** ESlint 統合機能の設定

    参考: [[https://github.com/emacs-lsp/lsp-mode/wiki/LSP-ESlint-integration][LSP ESlint integration]]

    #+begin_src emacs-lisp
      (setq lsp-eslint-server-command `("node" ,(expand-file-name (car (last (file-expand-wildcards "~/.vscode-server/extensions/dbaeumer.vscode-eslint-*/server/out/eslintServer.js")))) "--stdio"))
    #+end_src

** Java

   LSPを使うようにする。ついでにインデント設定等のデフォルト設定もする。

   #+begin_src emacs-lisp
     (taiju/package-install 'lsp-java)

     (defun taiju/java-mode-init ()
       (lsp)
       (setq c-basic-offset 4
             tab-width 4
             indent-tabs-mode nil))

     (add-hook 'java-mode-hook #'taiju/java-mode-init)
   #+end_src

** Lisp

   Emacs Lisp と Common Lisp の共通の設定。

   Lisp を編集しやすいようにする。

   Paredit をインストールする。

   #+begin_src emacs-lisp
     (taiju/package-install 'paredit)
   #+end_src

   Emacs Lisp と Common Lisp で show-paren-mode と paredit-mode と eldoc-mode を有効にする。

   #+begin_src emacs-lisp
     (defun lisps-mode-hooks ()
       (show-paren-mode t)
       (enable-paredit-mode)
       (eldoc-mode t))
     (mapc (lambda (hook) (add-hook hook #'lisps-mode-hooks))
           '(emacs-lisp-mode-hook
             ielm-mode-hook
             lisp-mode-hook
             lisp-interaction-mode-hook
             slime-repl-mode-hook
             eval-expression-minibuffer-setup-hook
             clojure-mode-hook
             cider-mode-hook
             cider-repl-mode-hook))
   #+end_src

*** Common Lisp

    SLIME をインストールする。

    #+begin_src emacs-lisp
      (taiju/package-install 'slime)
      (taiju/package-install 'slime-company)
    #+end_src

    その他、SLIME の設定をする。

    #+begin_src emacs-lisp
      (slime-setup '(slime-fancy slime-quicklisp slime-asdf slime-company slime-fuzzy))
      (setq slime-complete-symbol-function 'slime-fuzzy-complete-symbol)
    #+end_src

    処理系は SBCL を使う。

    #+begin_src emacs-lisp
      (setq inferior-lisp-program "sbcl")
    #+end_src

*** Clojure

    本当は Abcl 使いたいところだけど、今のところ Java の資産使うなら Clojure 使った方が良い。

    #+begin_src emacs-lisp
      (taiju/package-install 'cider)
    #+end_src

** Go

   Go の開発環境を整える。

   #+begin_src emacs-lisp
     (taiju/package-install 'go-mode)
     (defun taiju/go-mode-init ()
       (require 'dap-go)
       (lsp)
       (flycheck-mode)
       (setq tab-width 4
             c-basic-offset 4)
       (add-hook 'before-save-hook #'lsp-format-buffer t t)
       (add-hook 'before-save-hook #'lsp-organize-imports t t))
     (add-hook 'go-mode-hook #'taiju/go-mode-init)
   #+end_src

   Org モードでも使うので、ob-go も入れておく。

   #+begin_src emacs-lisp
     (taiju/package-install 'ob-go)
   #+end_src

** JavaScript/TypeScript

   JavaScript/TypeScript の開発環境。

   TypeScript の編集モードを入れる。

   #+begin_src emacs-lisp
     (taiju/package-install 'typescript-mode)
   #+end_src

   LSP を使う。

   #+begin_src emacs-lisp
     (add-hook 'js-mode-hook #'lsp)
     (add-hook 'typescript-mode-hook #'lsp)
   #+end_src

   拡張子が ~.[jt]sx~ の時は ~web-mode~ を使う。

   #+begin_src emacs-lisp
     (taiju/package-install 'web-mode)
     (add-to-list 'auto-mode-alist '("\\.[jt]sx\\'" . web-mode))
     (add-hook 'web-mode-hook #'lsp)
   #+end_src

** Haskell

   Haskell の編集モードをインストールして、LSP が使えるようにする。

   #+begin_src emacs-lisp
     (taiju/package-install 'haskell-mode)
     (taiju/package-install 'lsp-haskell)
     (add-hook 'haskell-mode-hook #'lsp)
   #+end_src

** 汎用データフォーマット

   Emacs 標準で入っていない汎用データフォーマット用のパッケージを追加する。

   #+begin_src emacs-lisp
     (taiju/package-install 'json-mode)
     (taiju/package-install 'yaml-mode)
   #+end_src

   JSONモードで幅の設定やらリンターの設定やらをする。

   #+begin_src emacs-lisp
     (defun taiju/json-mode-init ()
       (setq-local js-indent-level 2)
       (flycheck-mode))

     (add-hook 'json-mode-hook #'taiju/json-mode-init)
   #+end_src

* 各種パッケージ

  ここからは各種パッケージの個別設定を書いていく。

** Ido

   コマンド補完等は Ido を全面的に採用する。自分はデフォルト厨なので標準で入っているのが良い。

   #+begin_src emacs-lisp
     (ido-mode t)
   #+end_src

   記憶力がないので、Flexible Matching を有効にする。

   #+begin_src emacs-lisp
     (setq ido-enable-flex-matching t)
   #+end_src

   補完候補が大文字か小文字かも区別したくない。

   #+begin_src emacs-lisp
     (setq ido-case-fold t)
   #+end_src

   なるべくいろんなところで使えるようにする。

   #+begin_src emacs-lisp
     (ido-everywhere t)
   #+end_src

*** ido-completing-read+

    ido-every-where でも補完対象が足りない。

    #+begin_src emacs-lisp
      (taiju/package-install 'ido-completing-read+)
      (ido-ubiquitous-mode t)
    #+end_src

*** smex

    ~M-x~ でも Ido が使えるように ~smex~ を入れて、初期化しておく。

    #+begin_src emacs-lisp
      (taiju/package-install 'smex)
      (smex-initialize)
    #+end_src

    キーバインドは[[https://github.com/nonsequitur/smex/blob/master/README.markdown][公式ドキュメント]]そのままの設定にする。

    #+begin_src emacs-lisp
      (global-set-key (kbd "M-x") #'smex)
      (global-set-key (kbd "M-X") #'smex-major-mode-commands)
      (global-set-key (kbd "C-c C-c M-x") #'execute-extended-command)
    #+end_src

*** ido-vertical

    やはり補完候補は縦並びがしっくりくる。

    #+begin_src emacs-lisp
      (taiju/package-install 'ido-vertical-mode)
      (ido-vertical-mode 1)
    #+end_src

    補完候補の選択は使い慣れた ~C-n~, ~C-p~ にする。[fn:ido-vertical]

    #+begin_src emacs-lisp
      (setq ido-vertical-define-keys 'C-n-and-C-p-only)
    #+end_src

*** flx-ido

    flx-ido を入れて、常にあいまい検索できるようにする。

    #+begin_src emacs-lisp
      (taiju/package-install 'flx-ido)
      (flx-ido-mode 1)
    #+end_src

    ~flx-ido-use-faces~ が有効になるように標準のはオフる。

    #+begin_src emacs-lisp
      (setq ido-use-faces nil)
    #+end_src

*** ido-at-point

    completion-at-point でも Ido を使えるようにするため、ido-at-point を追加インストールする。

    #+begin_src emacs-lisp
      (taiju/package-install 'ido-at-point)
      (ido-at-point-mode)
    #+end_src

** Magit

   最高の Git クライアント。

   #+begin_src emacs-lisp
     (taiju/package-install 'magit)
   #+end_src

   Ido を有効にする。

   #+begin_src emacs-lisp
     (setq magit-completing-read-function 'magit-ido-completing-read)
   #+end_src

** Org

*** 全般

    最新版をインストールする。

    #+begin_src emacs-lisp
      (taiju/package-install 'org-plus-contrib)
    #+end_src

    タスクを閉じる時に閉じた時間を記録するようにする。

    #+begin_src emacs-lisp
      (setq org-log-done 'time)
    #+end_src

    org-todo-keywords を設定する。

    #+begin_src emacs-lisp
      (setq org-todo-keywords
            '((sequence "TODO(t)" "DOING(i!)" "WAIT(w@/!)" "|" "DONE(d@)" "CANCELED(c@)")))
    #+end_src

*** org-capture/org-refile

    キーバインドは標準的なやつ。

    #+begin_src emacs-lisp
      (global-set-key (kbd "C-c c") #'org-capture)
    #+end_src

    テンプレートは下記。

    #+begin_src emacs-lisp
      (setq org-capture-templates
            `(("t" "TODO" entry (file ,(expand-file-name "inbox.org" org-directory))
               "* TODO %?")
              ("n" "Notes" entry (file+olp+datetree ,(expand-file-name "notes.org" org-directory))
               "* %?%<%H:%M>")))
    #+end_src

    上記で追加したタスクなどは project.org に整理できるようにする。

    #+begin_src emacs-lisp
      (setq org-refile-targets
            `((,(string-join (list org-directory "project.org") "/") :maxlevel . 3)))
    #+end_src

    ~org-refile-use-outline-path~ を有効にする。

    #+begin_src emacs-lisp
      (setq org-refile-use-outline-path t)
    #+end_src

    段階的な絞り込みは不要。

    #+begin_src emacs-lisp
      (setq org-outline-path-complete-in-steps nil)
    #+end_src

*** org-agenda

    キーバインドは標準的なやつ。

    #+begin_src emacs-lisp
      (global-set-key (kbd "C-c a") #'org-agenda)
    #+end_src

    ~org-directory~ を ~org-agenda-files~ に設定する。

    #+begin_src emacs-lisp
      (setq org-agenda-files (list org-directory))
    #+end_src

    祝日を表示する。

    #+begin_src emacs-lisp
      (setq org-agenda-include-diary t)
    #+end_src

*** org-babel

    いろいろ org-babel で実行できるようにしておく。

    #+begin_src emacs-lisp
      (taiju/package-install 'ob-http)
      (taiju/package-install 'ob-deno)
    #+end_src

    #+begin_src emacs-lisp
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((emacs-lisp . t)
         (dot . t)
         (plantuml . t)
         (sql . t)
         (shell . t)
         (perl . t)
         (go . t)
         (http . t)
         (deno . t)))
    #+end_src

    ob-deno のソースは typescript-mode で表示・編集できるようにする。

    #+begin_src emacs-lisp
      (add-to-list 'org-src-lang-modes '("deno" . typescript))
    #+end_src

** undo-tree

   標準の undo / redo がうまく使いこなせないので、undo-tree を入れる。

   #+begin_src emacs-lisp
     (taiju/package-install 'undo-tree)
     (global-undo-tree-mode 1)
   #+end_src

** Twitter

   Twitter クライアントは Emacs で事足りる。

   #+begin_src emacs-lisp
     (taiju/package-install 'twittering-mode)
   #+end_src

   マスターパスワードを使って、トークンを保存する。

   #+begin_src emacs-lisp
     (setq twittering-use-master-password t)
   #+end_src

*** マスターパスワード入力できない問題の対処

    GPG の比較的新しいバージョンを使っている場合は、上記のマスターパスワードの入力ができずエラーになり、起動のたび PIN の入力が必要になる。

    下記の記事を参考に、パスフレーズの入力を標準入力から入力できるようにしておく必要がある。
    https://blog.web-apps.tech/emacs-mac-twittering-mode-every-asked-pin/

**** `~/.gnupg/gpg-agent.conf`

     #+begin_example
       allow-loopback-pinentry
     #+end_example

**** `~/.gnupg/gpg.conf`

     #+begin_example
       pinentry-mode loopback
     #+end_example

     ※ 上記の設定によって、gpg の他の機能が使えなくなる可能性があるらしいので、問題が生じたらやめる。

*** 暗号化されたファイルのデコードができない問題の対処

    Emacs のバージョンが新しい場合、twittering-mode のアカウント情報の複合化処理にて、すでに廃止された ~epa--decode-coding-string~ という関数を使っている箇所があり、 ~decode-coding-string~ を代わりに使うようにする必要がある。

    SEE: https://github.com/hayamiz/twittering-mode/issues/154

    twittering-mode のバージョンが ~20181121.1402~ で、かつ、Emacs のバージョンが 27 以上の場合は、アドバイスを使って強引に後述で定義する関数にまるっと差し替えるようにする。

    差し替える関数は下記。 ~epa--decode-coding-string~ を ~decode-coding-string~ に変更しているだけ。

    #+begin_src emacs-lisp
      (defun taiju/twittering-read-from-encrypted-file (_ file)
        "Decrypt contents from FILE and return them.
      Read encrypted contents from FILE and return the decrypted contents.
      This function requires `epa' or `alpaca' library."
        (cond
         ((not (file-readable-p file))
          (error "Failed to read %s" file)
          nil)
         ((require 'epa nil t)
          (let ((context (epg-make-context epa-protocol))
                ;; Bind `default-directory' to the temporary directory
                ;; because it is possible that the directory pointed by
                ;; `default-directory' has been already removed.
                (default-directory temporary-file-directory)
                (decrypted-result nil))
            (epg-context-set-passphrase-callback
             context #'epa-passphrase-callback-function)
            (epg-context-set-progress-callback
             context
             (cons #'epa-progress-callback-function
                   (format "Decrypting %s..." (file-name-nondirectory file))))
            (when (fboundp 'epg-context-pinentry-mode)
              (setf (epg-context-pinentry-mode context) epa-pinentry-mode))
            (message "Decrypting %s..." (file-name-nondirectory file))
            (condition-case err
                (let ((full-path (expand-file-name file)))
                  ;; `epg-decrypt-file' included in EasyPG 1.0.0, which is
                  ;; distributed with Emacs 23.2, requires the expanded full path
                  ;; as the argument CIPHER. This is because CIPHER is directly
                  ;; used as an argument of the command `gpg'.
                  (setq decrypted-result (epg-decrypt-file context full-path nil)))
              (error
               (if (fboundp 'epa-display-error)
                   (epa-display-error context)
                 (message "%s" (cdr err)))
               nil))
            (when decrypted-result
              (setq decrypted-result
                    (decode-coding-string ; << PATCH
                     decrypted-result
                     (or coding-system-for-read 'undecided))))
            (if (epg-context-result-for context 'verify)
                (epa-display-info (epg-verify-result-to-string
                                   (epg-context-result-for context 'verify))))
            decrypted-result))
         ((require 'alpaca nil t)
          (with-temp-buffer
            (let ((buffer-file-name (expand-file-name file))
                  (alpaca-regex-suffix ".*")
                  (coding-system-for-read 'binary)
                  (coding-system-for-write 'binary)
                  (temp-buffer (current-buffer))
                  ;; Bind `default-directory' to the temporary directory
                  ;; because it is possible that the directory pointed by
                  ;; `default-directory' has been already removed.
                  (default-directory temporary-file-directory))
              (insert-file-contents-literally file)
              (set-buffer-modified-p nil)
              (condition-case nil
                  (progn
                    (alpaca-after-find-file)
                    (if (eq temp-buffer (current-buffer))
                        (buffer-string)
                      ;; `alpaca-after-find-file' kills the current buffer
                      ;; if the decryption is failed.
                      nil))
                (error
                 (when (eq temp-buffer (current-buffer))
                   (delete-region (point-min) (point-max)))
                 nil)))))
         (t
          nil)))
    #+end_src

    advice でまるっと差し替える。

    #+begin_src emacs-lisp
      (when (and (equal (pkg-info-package-version 'twittering-mode) '(20181121 1402))
                 (>= emacs-major-version 27))
        (advice-add 'twittering-read-from-encrypted-file :around #'taiju/twittering-read-from-encrypted-file))
    #+end_src

** which-key

   うる覚えのキーバインドは which-key があると助かる時がある。

   #+begin_src emacs-lisp
     (taiju/package-install 'which-key)
     (which-key-mode)
   #+end_src

** dired

   dired-subtree を入れて、dired をツリーで操作できるようにする。

   #+begin_src emacs-lisp
     (taiju/package-install 'dired-subtree)
   #+end_src

   ツリーの開閉を直感的なキーバインドで操作できるようにする。

   #+begin_src emacs-lisp
     (require 'dired)
     (define-key dired-mode-map (kbd "<right>") 'dired-subtree-insert)
     (define-key dired-mode-map (kbd "<left>") 'dired-subtree-remove)
     (define-key dired-mode-map (kbd "f") 'dired-subtree-insert)
     (define-key dired-mode-map (kbd "b") 'dired-subtree-remove)
   #+end_src

   デフォルトだとサブツリーのバックグラウンドカラーがどぎつくて見にくすぎるので、色が変わる必要性もないし OFF る。

   #+begin_src emacs-lisp
     (setq dired-subtree-use-backgrounds nil)
   #+end_src

** emojify

   org-mode とかで絵文字使いたい時があるので emojify を入れておく。

   #+begin_src emacs-lisp
     (taiju/package-install 'emojify)
   #+end_src

   org-mode で有効化しておく。

   #+begin_src emacs-lisp
     (add-hook 'org-mode-hook #'emojify-mode)
   #+end_src

   絵文字のテスト:ok_hand:

** ace-window

   CUI バージョンを使っている時などに辛いのでウィンドウ切り替えの効率化のために ace-window を使用する。

   #+begin_src emacs-lisp
     (taiju/package-install 'ace-window)
     (global-set-key (kbd "M-o") #'ace-window)
     (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
   #+end_src

** ox-*

*** ox-gfm

    Org モードから Github Flavored Markdown をエクスポートできるようにする。

    #+begin_src emacs-lisp
      (taiju/package-install 'ox-gfm)
    #+end_src

** multiple-cursors

   マルチカーソルな作業ができる ~multiple-cursors~ を使用する。キーバインドは公式ドキュメントのまま。

   #+begin_src emacs-lisp
     (taiju/package-install 'multiple-cursors)
     (global-set-key (kbd "C-S-c C-S-c") #'mc/edit-lines)
     (global-set-key (kbd "C->") #'mc/mark-next-like-this)
     (global-set-key (kbd "C-<") #'mc/mark-previous-like-this)
     (global-set-key (kbd "C-c C-<") #'mc/mark-all-like-this)
   #+end_src

** Swiper

   I-search を Swiper に置き換える。

   #+begin_src emacs-lisp
     (taiju/package-install 'swiper)
     (global-set-key (kbd "\C-s") #'swiper)
   #+end_src

** Docker

   Docker のクライアントを使う。

   #+begin_src emacs-lisp
     (taiju/package-install 'docker)
     (global-set-key (kbd "C-c d") #'docker)
   #+end_src

   ~docker~ パッケージの依存関係に ~docker-tramp~ パッケージが含まれているので、TRAMP を使ってコンテナ内のファイルを編集できる。(~/docker:<image-id>/path/to/file~)

** sudo-edit

   sudo しないと編集できないファイルを sudo せずに開いた時に、少ない手順で sudo して開き直せるようにする。

   #+begin_src emacs-lisp
     (taiju/package-install 'sudo-edit)
   #+end_src

** God Mode

   疲れた時なんかに神になりたい時もある。

   #+begin_src emacs-lisp
     (taiju/package-install 'god-mode)
     (global-set-key (kbd "<escape>") #'god-local-mode)
   #+end_src

** calendar

   祝日をカレンダーに表示する。

   #+begin_src emacs-lisp
     (setq calendar-mark-holidays-flag t)
   #+end_src

** japanese-holidays.el

   calendar や Org モードで日本の祝日を反映させるために、japenese-holidays.el をインストールする。

   #+begin_src emacs-lisp
     (taiju/package-install 'japanese-holidays)
   #+end_src

   [[https://github.com/emacs-jp/japanese-holidays][公式ドキュメント]]を参考に日本の祝日を追加する。

   #+begin_src emacs-lisp :noweb yes
     (with-eval-after-load "holidays"
       (require 'japanese-holidays)
       (setq calendar-holidays
             (append japanese-holidays holiday-local-holidays holiday-other-holidays)))
   #+end_src

** graphql-mode

   GraphQL の編集等ができるように graphql-mode をインストールする。

   #+begin_src emacs-lisp
     (taiju/package-install 'graphql-mode)
   #+end_src

** vterm

   vterm をインストールする。Emacs を ~--with-modules~ オプション付きでコンパイルしておく必要がある。

   #+begin_src emacs-lisp
     (taiju/package-install 'vterm)
   #+end_src

   Debian (strech) でインストールする libvterm-dev は、vterm パッケージで想定しているものよりも古いらしく、下記のコンパイルオプションを有効にする必要がある。

   #+begin_src emacs-lisp
     (setq vterm-module-cmake-args "-DUSE_SYSTEM_LIBVTERM=no")
   #+end_src

   SEE: https://github.com/akermu/emacs-libvterm/issues/323

** htmlize

   Org ファイルのエクスポートなどに使用する。

   #+begin_src emacs-lisp
     (taiju/package-install 'htmlize)
   #+end_src

** unicode-fonts

   表示できる絵文字を増やすために unicode-fonts を入れる。

   #+begin_src emacs-lisp
     (taiju/package-install 'unicode-fonts)
     (unicode-fonts-setup)
   #+end_src

** plantuml

   PlantUML の編集ができるようにする。

   #+begin_src emacs-lisp
     (taiju/package-install 'plantuml-mode)
     (setq plantuml-jar-path "~/bin/plantuml.jar")
     (setq org-plantuml-jar-path plantuml-jar-path)
     (setq plantuml-options "-charset UTF-8")
   #+end_src

* Footnotes

[fn:mozc] この設定を上記の設定より前に書くと上手く効かなかった。

[fn:ido-vertical] ~ido-toggle-prefix~ が ~C-p~ にバインドされているけど、使わないので上書きして問題ない。
